{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","stad-stat/tests/adapters/application.jshint.lint-test.js","stad-stat/tests/app.jshint.lint-test.js","stad-stat/tests/components/chart-single-value.jshint.lint-test.js","stad-stat/tests/components/chart-zoomed-value.jshint.lint-test.js","stad-stat/tests/components/default-chart.jshint.lint-test.js","stad-stat/tests/components/default-line-chart.jshint.lint-test.js","stad-stat/tests/components/edit-has-many.jshint.lint-test.js","stad-stat/tests/components/fact-browser.jshint.lint-test.js","stad-stat/tests/components/fact-selector.jshint.lint-test.js","stad-stat/tests/components/news-section.jshint.lint-test.js","stad-stat/tests/controllers/drill.jshint.lint-test.js","stad-stat/tests/controllers/search.jshint.lint-test.js","stad-stat/tests/helpers/destroy-app.js","stad-stat/tests/helpers/destroy-app.jshint.lint-test.js","stad-stat/tests/helpers/ember-basic-dropdown.js","stad-stat/tests/helpers/ember-keyboard/register-test-helpers.js","stad-stat/tests/helpers/ember-power-select.js","stad-stat/tests/helpers/module-for-acceptance.js","stad-stat/tests/helpers/module-for-acceptance.jshint.lint-test.js","stad-stat/tests/helpers/resolver.js","stad-stat/tests/helpers/resolver.jshint.lint-test.js","stad-stat/tests/helpers/start-app.js","stad-stat/tests/helpers/start-app.jshint.lint-test.js","stad-stat/tests/integration/components/chart-single-value-test.js","stad-stat/tests/integration/components/chart-single-value-test.jshint.lint-test.js","stad-stat/tests/integration/components/chart-zoomed-value-test.js","stad-stat/tests/integration/components/chart-zoomed-value-test.jshint.lint-test.js","stad-stat/tests/integration/components/default-linechart-test.js","stad-stat/tests/integration/components/default-linechart-test.jshint.lint-test.js","stad-stat/tests/integration/components/default-piechart-test.js","stad-stat/tests/integration/components/default-piechart-test.jshint.lint-test.js","stad-stat/tests/integration/components/edit-has-many-test.js","stad-stat/tests/integration/components/edit-has-many-test.jshint.lint-test.js","stad-stat/tests/integration/components/fact-browser-test.js","stad-stat/tests/integration/components/fact-browser-test.jshint.lint-test.js","stad-stat/tests/integration/components/fact-selector-test.js","stad-stat/tests/integration/components/fact-selector-test.jshint.lint-test.js","stad-stat/tests/integration/components/news-section-test.js","stad-stat/tests/integration/components/news-section-test.jshint.lint-test.js","stad-stat/tests/models/region-theme.jshint.lint-test.js","stad-stat/tests/models/region.jshint.lint-test.js","stad-stat/tests/models/theme.jshint.lint-test.js","stad-stat/tests/models/topic.jshint.lint-test.js","stad-stat/tests/models/value.jshint.lint-test.js","stad-stat/tests/resolver.jshint.lint-test.js","stad-stat/tests/router.jshint.lint-test.js","stad-stat/tests/routes/drill.jshint.lint-test.js","stad-stat/tests/routes/index.jshint.lint-test.js","stad-stat/tests/routes/search.jshint.lint-test.js","stad-stat/tests/test-helper.js","stad-stat/tests/test-helper.jshint.lint-test.js","stad-stat/tests/transitions.jshint.lint-test.js","stad-stat/tests/unit/adapters/application-test.js","stad-stat/tests/unit/adapters/application-test.jshint.lint-test.js","stad-stat/tests/unit/controllers/drill-test.js","stad-stat/tests/unit/controllers/drill-test.jshint.lint-test.js","stad-stat/tests/unit/controllers/search-test.js","stad-stat/tests/unit/controllers/search-test.jshint.lint-test.js","stad-stat/tests/unit/models/region-test.js","stad-stat/tests/unit/models/region-test.jshint.lint-test.js","stad-stat/tests/unit/models/region-theme-test.js","stad-stat/tests/unit/models/region-theme-test.jshint.lint-test.js","stad-stat/tests/unit/models/theme-test.js","stad-stat/tests/unit/models/theme-test.jshint.lint-test.js","stad-stat/tests/unit/models/topic-test.js","stad-stat/tests/unit/models/topic-test.jshint.lint-test.js","stad-stat/tests/unit/models/value-test.js","stad-stat/tests/unit/models/value-test.jshint.lint-test.js","stad-stat/tests/unit/routes/drill-test.js","stad-stat/tests/unit/routes/drill-test.jshint.lint-test.js","stad-stat/tests/unit/routes/index-test.js","stad-stat/tests/unit/routes/index-test.jshint.lint-test.js","stad-stat/tests/unit/routes/search-test.js","stad-stat/tests/unit/routes/search-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('stad-stat/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('stad-stat/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/chart-single-value.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/chart-single-value.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/chart-single-value.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/chart-zoomed-value.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/chart-zoomed-value.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/chart-zoomed-value.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/default-chart.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/default-chart.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/default-chart.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/default-line-chart.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/default-line-chart.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/default-line-chart.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/edit-has-many.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/edit-has-many.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-has-many.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/fact-browser.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/fact-browser.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/fact-browser.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/fact-selector.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/fact-selector.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/fact-selector.js should pass jshint.');\n  });\n});","define('stad-stat/tests/components/news-section.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/news-section.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/news-section.js should pass jshint.');\n  });\n});","define('stad-stat/tests/controllers/drill.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/drill.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/drill.js should pass jshint.');\n  });\n});","define('stad-stat/tests/controllers/search.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/search.js should pass jshint.');\n  });\n});","define('stad-stat/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('stad-stat/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('stad-stat/tests/helpers/ember-basic-dropdown', ['exports', 'ember', 'ember-runloop', 'jquery'], function (exports, _ember, _emberRunloop, _jquery) {\n  exports.nativeClick = nativeClick;\n  exports.clickTrigger = clickTrigger;\n  exports.tapTrigger = tapTrigger;\n  exports.fireKeydown = fireKeydown;\n\n  // integration helpers\n  function focus(el) {\n    if (!el) {\n      return;\n    }\n    var $el = (0, _jquery['default'])(el);\n    if ($el.is(':input, [contenteditable=true]')) {\n      var type = $el.prop('type');\n      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n        (0, _emberRunloop['default'])(null, function () {\n          // Firefox does not trigger the `focusin` event if the window\n          // does not have focus. If the document doesn't have focus just\n          // use trigger('focusin') instead.\n\n          if (!document.hasFocus || document.hasFocus()) {\n            el.focus();\n          } else {\n            $el.trigger('focusin');\n          }\n        });\n      }\n    }\n  }\n\n  function nativeClick(selector) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var mousedown = new window.Event('mousedown', { bubbles: true, cancelable: true, view: window });\n    var mouseup = new window.Event('mouseup', { bubbles: true, cancelable: true, view: window });\n    var click = new window.Event('click', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      mousedown[key] = options[key];\n      mouseup[key] = options[key];\n      click[key] = options[key];\n    });\n    var element = document.querySelector(selector);\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(mousedown);\n    });\n    focus(element);\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(mouseup);\n    });\n    (0, _emberRunloop['default'])(function () {\n      return element.dispatchEvent(click);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      var $element = (0, _jquery['default'])(scope);\n      if ($element.hasClass('ember-basic-dropdown-trigger')) {\n        selector = scope;\n      } else {\n        selector = scope + ' ' + selector;\n      }\n    }\n    nativeClick(selector, options);\n  }\n\n  function tapTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-basic-dropdown-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchStartEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchStartEvent);\n    });\n    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n    Object.keys(options).forEach(function (key) {\n      return touchEndEvent[key] = options[key];\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(touchEndEvent);\n    });\n  }\n\n  function fireKeydown(selector, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    _jquery['default'].extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      return document.querySelector(selector).dispatchEvent(oEvent);\n    });\n  }\n\n  // acceptance helpers\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('clickDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      clickTrigger(cssPath, options);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('tapDropdown', function (app, cssPath) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      tapTrigger(cssPath, options);\n    });\n  };\n});","define('stad-stat/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard'], function (exports, _ember, _emberKeyboard) {\n\n  var keyEvent = function keyEvent(app, attributes, type) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (['ctrl', 'meta', 'alt', 'shift'].indexOf(attribute) > -1) {\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes) {\n      return keyEvent(app, attributes, 'keydown');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes) {\n      return keyEvent(app, attributes, 'keyup');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes) {\n      return keyEvent(app, attributes, 'keypress');\n    });\n  };\n});","define('stad-stat/tests/helpers/ember-power-select', ['exports', 'jquery', 'ember-runloop', 'ember-test'], function (exports, _jquery, _emberRunloop, _emberTest) {\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n\n  // Helpers for integration tests\n\n  function typeText(selector, text) {\n    var $selector = (0, _jquery['default'])((0, _jquery['default'])(selector).get(0)); // Only interact with the first result\n    $selector.val(text);\n    var event = document.createEvent('Events');\n    event.initEvent('input', true, true);\n    $selector[0].dispatchEvent(event);\n  }\n\n  function fireNativeMouseEvent(eventType, selectorOrDomElement) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var event = undefined;\n    try {\n      event = new window.Event(eventType, { bubbles: true, cancelable: true, view: window });\n    } catch (e) {\n      // fix IE11: \"Object doesn't support this action\"\n      event = document.createEvent('Event');\n      var bubbles = true;\n      var cancelable = true;\n      event.initEvent(eventType, bubbles, cancelable);\n    }\n\n    Object.keys(options).forEach(function (key) {\n      return event[key] = options[key];\n    });\n    var target = undefined;\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n  }\n\n  function nativeMouseDown(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mousedown', selectorOrDomElement, options);\n  }\n\n  function nativeMouseUp(selectorOrDomElement, options) {\n    fireNativeMouseEvent('mouseup', selectorOrDomElement, options);\n  }\n\n  function triggerKeydown(domElement, k) {\n    var oEvent = document.createEvent('Events');\n    oEvent.initEvent('keydown', true, true);\n    _jquery['default'].extend(oEvent, {\n      view: window,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      keyCode: k,\n      charCode: k\n    });\n    (0, _emberRunloop['default'])(function () {\n      domElement.dispatchEvent(oEvent);\n    });\n  }\n\n  function typeInSearch(text) {\n    (0, _emberRunloop['default'])(function () {\n      typeText('.ember-power-select-search-input, .ember-power-select-search input, .ember-power-select-trigger-multiple-input, input[type=\"search\"]', text);\n    });\n  }\n\n  function clickTrigger(scope) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var selector = '.ember-power-select-trigger';\n    if (scope) {\n      selector = scope + ' ' + selector;\n    }\n    nativeMouseDown(selector, options);\n  }\n\n  function nativeTouch(selectorOrDomElement) {\n    var event = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });\n    var target = undefined;\n\n    if (typeof selectorOrDomElement === 'string') {\n      target = (0, _jquery['default'])(selectorOrDomElement)[0];\n    } else {\n      target = selectorOrDomElement;\n    }\n    (0, _emberRunloop['default'])(function () {\n      return target.dispatchEvent(event);\n    });\n    (0, _emberRunloop['default'])(function () {\n      event = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });\n      target.dispatchEvent(event);\n    });\n  }\n\n  function touchTrigger() {\n    var selector = '.ember-power-select-trigger';\n    nativeTouch(selector);\n  }\n\n  // Helpers for acceptance tests\n\n  exports['default'] = function () {\n    _emberTest['default'].registerAsyncHelper('selectChoose', function (app, cssPath, valueOrSelector) {\n      var $trigger = find(cssPath + ' .ember-power-select-trigger');\n\n      if ($trigger === undefined || $trigger.length === 0) {\n        $trigger = find(cssPath);\n      }\n\n      if ($trigger.length === 0) {\n        throw new Error('You called \"selectChoose(\\'' + cssPath + '\\', \\'' + valueOrSelector + '\\')\" but no select was found using selector \"' + cssPath + '\"');\n      }\n\n      var contentId = '' + $trigger.attr('aria-controls');\n      var $content = find('#' + contentId);\n      // If the dropdown is closed, open it\n      if ($content.length === 0) {\n        nativeMouseDown($trigger.get(0));\n        wait();\n      }\n\n      // Select the option with the given text\n      andThen(function () {\n        var potentialTargets = (0, _jquery['default'])('#' + contentId + ' .ember-power-select-option:contains(\"' + valueOrSelector + '\")').toArray();\n        var target = undefined;\n        if (potentialTargets.length === 0) {\n          // If treating the value as text doesn't gave use any result, let's try if it's a css selector\n          potentialTargets = (0, _jquery['default'])('#' + contentId + ' ' + valueOrSelector).toArray();\n        }\n        if (potentialTargets.length > 1) {\n          target = potentialTargets.filter(function (t) {\n            return t.textContent.trim() === valueOrSelector;\n          })[0] || potentialTargets[0];\n        } else {\n          target = potentialTargets[0];\n        }\n        if (!target) {\n          throw new Error('You called \"selectChoose(\\'' + cssPath + '\\', \\'' + valueOrSelector + '\\')\" but \"' + valueOrSelector + '\" didn\\'t match any option');\n        }\n        nativeMouseUp(target);\n      });\n    });\n\n    _emberTest['default'].registerAsyncHelper('selectSearch', function (app, cssPath, value) {\n      var triggerPath = cssPath + ' .ember-power-select-trigger';\n      var $trigger = find(triggerPath);\n      if ($trigger === undefined || $trigger.length === 0) {\n        triggerPath = cssPath;\n        $trigger = find(triggerPath);\n      }\n\n      if ($trigger.length === 0) {\n        throw new Error('You called \"selectSearch(\\'' + cssPath + '\\', \\'' + value + '\\')\" but no select was found using selector \"' + cssPath + '\"');\n      }\n\n      var contentId = '' + $trigger.attr('aria-controls');\n      var isMultipleSelect = (0, _jquery['default'])(cssPath + ' .ember-power-select-trigger-multiple-input').length > 0;\n\n      var dropdownIsClosed = (0, _jquery['default'])('#' + contentId).length === 0;\n      if (dropdownIsClosed) {\n        nativeMouseDown(triggerPath);\n        wait();\n      }\n      var isDefaultSingleSelect = (0, _jquery['default'])('.ember-power-select-search-input').length > 0;\n\n      if (isMultipleSelect) {\n        fillIn(triggerPath + ' .ember-power-select-trigger-multiple-input', value);\n      } else if (isDefaultSingleSelect) {\n        fillIn('.ember-power-select-search-input', value);\n      } else {\n        // It's probably a customized version\n        var inputIsInTrigger = !!find(cssPath + ' .ember-power-select-trigger input[type=search]')[0];\n        if (inputIsInTrigger) {\n          fillIn(triggerPath + ' input[type=search]', value);\n        } else {\n          fillIn('#' + contentId + ' .ember-power-select-search-input[type=search]', 'input');\n        }\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('removeMultipleOption', function (app, cssPath, value) {\n      var elem = find(cssPath + ' .ember-power-select-multiple-options > li:contains(' + value + ') > .ember-power-select-multiple-remove-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to remove btn not found');\n        throw e;\n      }\n    });\n\n    _emberTest['default'].registerAsyncHelper('clearSelected', function (app, cssPath) {\n      var elem = find(cssPath + ' .ember-power-select-clear-btn').get(0);\n      try {\n        nativeMouseDown(elem);\n        wait();\n      } catch (e) {\n        console.warn('css path to clear btn not found');\n        throw e;\n      }\n    });\n  };\n});","define('stad-stat/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'stad-stat/tests/helpers/start-app', 'stad-stat/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _stadStatTestsHelpersStartApp, _stadStatTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _stadStatTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _stadStatTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('stad-stat/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('stad-stat/tests/helpers/resolver', ['exports', 'stad-stat/resolver', 'stad-stat/config/environment'], function (exports, _stadStatResolver, _stadStatConfigEnvironment) {\n\n  var resolver = _stadStatResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _stadStatConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _stadStatConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('stad-stat/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('stad-stat/tests/helpers/start-app', ['exports', 'ember', 'stad-stat/app', 'stad-stat/config/environment'], function (exports, _ember, _stadStatApp, _stadStatConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _stadStatConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _stadStatApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('stad-stat/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/chart-single-value-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('chart-single-value', 'Integration | Component | chart single value', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '9MvJo52P',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"chart-single-value\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'NA1MJ3/X',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"chart-single-value\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/chart-single-value-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/chart-single-value-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/chart-single-value-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/chart-zoomed-value-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('chart-zoomed-value', 'Integration | Component | chart zoomed value', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '/HfY7lE4',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"chart-zoomed-value\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'WRIZIp9P',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"chart-zoomed-value\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/chart-zoomed-value-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/chart-zoomed-value-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/chart-zoomed-value-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/default-linechart-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('default-linechart', 'Integration | Component | default linechart', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'xoQ1/wpn',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"default-linechart\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'poNd/81V',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"default-linechart\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/default-linechart-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/default-linechart-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/default-linechart-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/default-piechart-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('default-piechart', 'Integration | Component | default piechart', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'XWMxwFA8',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"default-piechart\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'p35lahYu',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"default-piechart\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/default-piechart-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/default-piechart-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/default-piechart-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/edit-has-many-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('edit-has-many', 'Integration | Component | edit has many', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'ORcbXmEr',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"edit-has-many\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '99LGxGDt',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"edit-has-many\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/edit-has-many-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/edit-has-many-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-has-many-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/fact-browser-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('fact-browser', 'Integration | Component | fact browser', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'bNJWW+fM',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"fact-browser\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'y2nNRQFC',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"fact-browser\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/fact-browser-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/fact-browser-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/fact-browser-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/fact-selector-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('fact-selector', 'Integration | Component | fact selector', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '4k+DNeJ0',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"fact-selector\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '6k/hdPqK',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"fact-selector\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/fact-selector-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/fact-selector-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/fact-selector-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/integration/components/news-section-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('news-section', 'Integration | Component | news section', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'BmsAqrwm',\n      'block': '{\"symbols\":[],\"statements\":[[1,[18,\"news-section\"],false]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'g8+A11+z',\n      'block': '{\"symbols\":[],\"statements\":[[0,\"\\\\n\"],[4,\"news-section\",null,null,{\"statements\":[[0,\"      template block text\\\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('stad-stat/tests/integration/components/news-section-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/news-section-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/news-section-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/models/region-theme.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/region-theme.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/region-theme.js should pass jshint.');\n  });\n});","define('stad-stat/tests/models/region.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/region.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/region.js should pass jshint.');\n  });\n});","define('stad-stat/tests/models/theme.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/theme.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/theme.js should pass jshint.');\n  });\n});","define('stad-stat/tests/models/topic.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/topic.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/topic.js should pass jshint.');\n  });\n});","define('stad-stat/tests/models/value.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/value.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/value.js should pass jshint.');\n  });\n});","define('stad-stat/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('stad-stat/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('stad-stat/tests/routes/drill.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/drill.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/drill.js should pass jshint.');\n  });\n});","define('stad-stat/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('stad-stat/tests/routes/search.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/search.js should pass jshint.');\n  });\n});","define('stad-stat/tests/test-helper', ['exports', 'stad-stat/tests/helpers/resolver', 'ember-qunit'], function (exports, _stadStatTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_stadStatTestsHelpersResolver['default']);\n});","define('stad-stat/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('stad-stat/tests/transitions.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transitions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('stad-stat/tests/unit/adapters/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/controllers/drill-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:drill', 'Unit | Controller | drill', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('stad-stat/tests/unit/controllers/drill-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/drill-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/drill-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/controllers/search-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:search', 'Unit | Controller | search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('stad-stat/tests/unit/controllers/search-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/search-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/models/region-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('region', 'Unit | Model | region', {\n    // Specify the other units that are required for this test.\n    needs: ['model:region-theme']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('stad-stat/tests/unit/models/region-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/region-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/region-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/models/region-theme-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('region-theme', 'Unit | Model | region theme', {\n    // Specify the other units that are required for this test.\n    needs: ['model:value', 'model:theme', 'model:region']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('stad-stat/tests/unit/models/region-theme-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/region-theme-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/region-theme-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/models/theme-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('theme', 'Unit | Model | theme', {\n    // Specify the other units that are required for this test.\n    needs: ['model:topic', 'model:region-theme']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('stad-stat/tests/unit/models/theme-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/theme-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/theme-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/models/topic-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('topic', 'Unit | Model | topic', {\n    // Specify the other units that are required for this test.\n    needs: ['model:theme']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('stad-stat/tests/unit/models/topic-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/topic-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/topic-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/models/value-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('value', 'Unit | Model | value', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('stad-stat/tests/unit/models/value-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/value-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/value-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/routes/drill-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:drill', 'Unit | Route | drill', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('stad-stat/tests/unit/routes/drill-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/drill-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/drill-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('stad-stat/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('stad-stat/tests/unit/routes/search-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:search', 'Unit | Route | search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('stad-stat/tests/unit/routes/search-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/search-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('stad-stat/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}